import http from 'k6/http';\nimport { sleep, check } from 'k6';\nimport { Rate } from 'k6/metrics';\n\n// Custom metrics\nexport const errorRate = new Rate('errors');\n\n// Test configuration\nexport let options = {\n  // Test scenario 1: Load test\n  scenarios: {\n    // API endpoint test\n    api_endpoints: {\n      executor: 'ramping-vus',\n      startVUs: 0,\n      stages: [\n        { duration: '30s', target: 20 },  // Ramp up to 20 users over 30 seconds\n        { duration: '1m', target: 20 },   // Stay at 20 users for 1 minute\n        { duration: '30s', target: 50 },  // Ramp up to 50 users over 30 seconds\n        { duration: '1m', target: 50 },   // Stay at 50 users for 1 minute\n        { duration: '30s', target: 0 },   // Ramp down to 0 users over 30 seconds\n      ],\n      gracefulRampDown: '10s',\n    },\n    // Health check test\n    health_checks: {\n      executor: 'constant-arrival-rate',\n      rate: 10,                // 10 iterations per second\n      timeUnit: '1s',         \n      duration: '3m',          // Run for 3 minutes\n      preAllocatedVUs: 5,      // Pre-allocate 5 VUs\n      maxVUs: 10,              // Maximum 10 VUs\n    },\n  },\n  // Thresholds for success criteria\n  thresholds: {\n    http_req_failed: ['rate<0.01'],        // Less than 1% of requests should fail\n    http_req_duration: ['p(95)<500'],       // 95% of requests should be below 500ms\n    'http_req_duration{endpoint:health}': ['p(99)<100'],  // 99% of health checks should be below 100ms\n    'http_req_duration{endpoint:messages}': ['p(95)<1000'], // 95% of message requests should be below 1000ms\n    'errors': ['rate<0.01'],                // Less than 1% error rate\n  },\n};\n\n// Simulated client payload\nconst messagePayload = JSON.stringify({\n  id: 'test-message',\n  role: 'user',\n  content: 'Hello, world',\n  created_at: new Date().toISOString(),\n});\n\n// Main test function\nexport default function() {\n  // Determine the test URL based on environment or use a default\n  const baseUrl = __ENV.BASE_URL || 'http://localhost:3000';\n  \n  // Test group for health endpoint\n  const healthRes = http.get(`${baseUrl}/health`, {\n    tags: { endpoint: 'health' },\n  });\n  \n  // Check health response\n  const healthCheck = check(healthRes, {\n    'Health check returns 200': (r) => r.status === 200,\n    'Health check response is valid': (r) => r.json('status') === 'ok',\n  });\n  \n  // Record errors for failed checks\n  if (!healthCheck) {\n    errorRate.add(1);\n    console.error(`Health check failed: ${healthRes.status} ${healthRes.body}`);\n  }\n  \n  // Small sleep to simulate user behavior\n  sleep(1);\n  \n  // Test group for messages endpoint\n  const messagesRes = http.post(\n    `${baseUrl}/messages?sessionId=test-session`,\n    messagePayload,\n    {\n      headers: { 'Content-Type': 'application/json' },\n      tags: { endpoint: 'messages' },\n    }\n  );\n  \n  // Check messages response\n  const messagesCheck = check(messagesRes, {\n    'Messages endpoint returns success status': (r) => r.status < 400,\n  });\n  \n  // Record errors for failed checks\n  if (!messagesCheck) {\n    errorRate.add(1);\n    console.error(`Messages check failed: ${messagesRes.status} ${messagesRes.body}`);\n  }\n  \n  // Small sleep before completing the iteration\n  sleep(2);\n}\n